#include<ctype.h>
#include<string.h>
#include<stack> 
#include<iostream>
#include<fstream>
#include<cassert>
#define MAX 100000 

using namespace std;

int n=0,level;
char a[MAX];                              // Store a word of up to 100,000 characters
int switch_num;                           // A variable that records the number of switch
int case_num[100], case_n=0;              // A variable that records the number of case 
int if_else_n=0, if_else_if_n=0;          // A variable that records the number of if-else and if-else-if-else
stack<int> st;                            // Stack implementation if-else-else-if matching problem
const char * key[] ={
"auto","break","case","char","const",
"continue","default","do","double",
"else","enum","extern","float","for",
"goto","if","int","long","register",
"return","short","signed","sizeof",
"static","struct","switch","typedef",
"union","unsigned","void","volatile","while"
} ;

//Const char* array, which in order of keywords
//There are 32 keywords

#define NKEYS 32

int j=0;
int getWord(char *word, int lim){
    char *w = word;
    for( j;j<n;j++){
    if(isspace(a[j]))
	   continue;
	else break;                               //Ignore whitespace
 }
     
    *w++ = a[j];
    if (!isalpha(a[j])){                      // not the letter case
        *w = '\0';
        return a[j++];
    }
     j++;
     for ( ; --lim > 0; w++){
     if (!isalnum(*w = a[j++])){             // The word ends when it is not a letter or number
        j--;
        break;
        }
    }
    *w = '\0';                               // String terminator '\0'
}

    /* binary search:  find word in tab[0]...tab[n-1] */

int binSearch(char *word, int n)
{
    int cond;
    int low, high, mid;
    low = 0;
    high = n - 1;
    while (low<=high)
 {
        mid = (low+high) / 2;
        if ((cond=strcmp(word, key[mid])) < 0)
            high = mid - 1;
        else if (cond > 0)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}

int flag=0;
void pop0(){
	while(st.empty()<=0){
		int p=st.top();
		st.pop();
		if(p==2){
			flag=1;
		}
		if(p==1){
			if(flag==1){             // if and else with elseif 
				if_else_if_n++;
				flag=0;break; 
			}		   
		    if(flag==0){             // if and else without elseif between them
			    if_else_n++;break;
			}	    		
		}	
	}
}

void count(){
    int m;
	int word_flag = 0;
	int sum = 0;
    char word[MAX], word0[MAX];       // Word0 records last word
    for(int i=0;i<n;i++)
{
    getWord(word,MAX);
    if (isalpha(word[0]))             // The first letter of a word is a letter
        {
		if ((m = binSearch(word, NKEYS)) >= 0)
            {
			sum++;                   // The keyword count is increased by 1 if the lookup is successful in the structure
			if(strcmp(key[m],"case")==0)
			case_num[case_n]++;
			if(strcmp(key[m],"switch")==0)
		    {
			case_n++;switch_num++;
			}
			
			if(strcmp(key[m],"if")==0 && (strcmp(word0,"else")!=0 || word_flag==1))
		    st.push(1);              // Record if as 1, else if as 2, else as 3
			if(strcmp(key[m],"if")==0 && strcmp(word0,"else")==0 && word_flag==0)
		    st.push(2);  
			if((strcmp(key[m],"if")!=0 || word_flag==1) && strcmp(word0,"else")==0)
		    pop0();                 // Else out of the stack
			
			strcpy(word0,key[m]);
			}
			word_flag = 0;	        // Restore wordflag
		} 
	else word_flag = 1;             // Record the last word as a non-letter 
 }
  
    // The count ends and the result is printed
    cout<<"total num: "<<sum<<endl;
    if(level>=2){                                 // switch-case structure
	cout<<"switch num: "<<switch_num<<endl;
    cout<<"case num: ";
    for(int k=1;k<=switch_num;k++)
    cout<<case_num[k]<<" ";
    cout<<endl;
 }
    if(level>=3){                                 // if-else structure
	pop0();
 	cout<<"if-else num: "<<if_else_n<<endl;
 }
    if(level==4){                                 // if-elseif-else structure
 	cout<<"if-elseif-else num: "<<if_else_if_n<<endl;
 }
}

void readFile(string file)
{
    ifstream infile; 
    infile.open(file.data());     // Connect the file stream object to the file 
    assert(infile.is_open());     // If it fails, an error message is output and the program is terminated
	char c;
    infile >> noskipws;
    while (!infile.eof())
    {
        infile>>c;
        a[n++] = c;
    }
	infile.close();               // Close file reading   
    count();          
}

int main(){
	string s;
	cin>> s;                      // input the file name
	cin>>level;                   //input the level(requirement) you want to include in (1,2,3,4)
	readFile(s);
	return 0;
}
